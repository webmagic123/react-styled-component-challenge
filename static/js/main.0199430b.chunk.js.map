{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["LIMIT","palette","blue","green","transparent","Wrapper","styled","div","_templateObject","Container","_templateObject2","props","color","alt","Button","button","_templateObject3","App","colors","state","count","cycleIndex","recaping","handleCounterBtnClick","_this","setState","_ref","newCount","getColor","push","stopRecapInterval","handleRecapBtnClick","startRecapInterval","this","_this2","interval","setInterval","_ref2","length","clearInterval","num","i","s","Math","sqrt","isPrime","_this$state","react_default","a","createElement","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"o7BAIA,IAAMA,EAAQ,IACRC,EAAU,CACdC,KAAM,OACNC,MAAO,QACPC,YAAa,eAGTC,EAAUC,IAAOC,IAAVC,KAOPC,EAAYH,IAAOC,IAAVG,IAQO,SAAAC,GAAK,OAAIA,EAAMC,OACjC,SAAAD,GAAK,OAAIA,EAAME,KAAN,gFAMPC,EAASR,IAAOS,OAAVC,KAsGGC,6MAxFbC,OAAS,KAETC,MAAQ,CACNC,MAAO,EACPC,WAAY,EACZC,UAAU,KAsBZC,sBAAwB,WAClBC,EAAKL,MAAMC,MAAQpB,IACrBwB,EAAKC,SAAS,SAAAC,GAAe,IACrBC,EADqBD,EAAZN,MACU,EACnBR,EAAQY,EAAKI,SAASD,GAI5B,OAHIf,IAAUX,EAAQG,aACpBoB,EAAKN,OAAOW,KAAKjB,GAEZ,CAAEQ,MAAOO,KAElBH,EAAKM,wBAITC,oBAAsB,WACpBP,EAAKQ,4GAjCLC,KAAKH,iEAGc,IAAAI,EAAAD,KACnBA,KAAKR,SAAS,CACZH,UAAU,EACVD,WAAY,IAEdY,KAAKE,SAAWC,YAAY,WAC1BF,EAAKT,SAAS,SAAAY,GAAA,MAAqB,CAAEhB,YAAvBgB,EAAGhB,WAA8C,GAAKa,EAAKhB,OAAOoB,WAC/E,iDAIHL,KAAKR,SAAS,CAAEH,UAAU,IAC1BiB,cAAcN,KAAKE,0CAsBbK,GACN,IAAK,IAAIC,EAAI,EAAGC,EAAIC,KAAKC,KAAKJ,GAAMC,GAAKC,EAAGD,IAC1C,GAAID,EAAMC,IAAM,EACd,OAAO,EAGX,OAAe,IAARD,mCAGAA,GACP,OAAIA,EAAM,IAAM,EACPvC,EAAQE,MAGb8B,KAAKY,QAAQL,GACRvC,EAAQC,KAGVD,EAAQG,6CAGR,IAAA0C,EACiCb,KAAKd,MAArCC,EADD0B,EACC1B,MAAOC,EADRyB,EACQzB,WACTR,EAAgB,IAAVO,GAAeA,EAAQ,KAAO,EACpCR,EAHCkC,EACoBxB,SAEFW,KAAKf,OAAOG,GAAcY,KAAKL,SAASR,GACjE,OACE2B,EAAAC,EAAAC,cAAC5C,EAAD,KACE0C,EAAAC,EAAAC,cAACxC,EAAD,CAAWG,MAAOA,EAAOC,IAAKA,GAC5BkC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACnC,EAAD,CAAQoC,QAASjB,KAAKV,uBAAtB,aACaH,GAEb2B,EAAAC,EAAAC,cAACnC,EAAD,CAAQoC,QAASjB,KAAKF,qBAAtB,0BA/EMoB,aClCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOX,EAAAC,EAAAC,cAACU,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.0199430b.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport styled from 'styled-components';\nimport './App.css';\n\nconst LIMIT = 100;\nconst palette = {\n  blue: 'blue',\n  green: 'green',\n  transparent: 'transparent',\n};\n\nconst Wrapper = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  height: 100vh;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  width: 500px;\n  height: 500px;\n  text-align: center;\n  border: 5px solid black;\n  background-color: ${props => props.color};\n  ${props => props.alt && `\n    filter: drop-shadow(3px 3px 5px black);\n    border-radius: 100%;\n  `}\n`;\n\nconst Button = styled.button`\n  padding: 5px;\n  font-size: 15px;\n  outline: none;\n  border: 2px solid black;\n  background: white;\n  min-width: 100px;\n\n  &:not(:first-child) {\n    margin-left: 10px;\n  }\n`;\n\nclass App extends Component {\n  colors = [];\n\n  state = {\n    count: 0,\n    cycleIndex: 0,\n    recaping: false,\n  };\n\n  componentWillUnmount() {\n    this.stopRecapInterval();\n  }\n\n  startRecapInterval() {\n    this.setState({\n      recaping: true,\n      cycleIndex: 0\n    });\n    this.interval = setInterval(() => {\n      this.setState(({ cycleIndex }) => ({ cycleIndex: (cycleIndex + 1) % this.colors.length }));\n    }, 500);\n  }\n\n  stopRecapInterval() {\n    this.setState({ recaping: false });\n    clearInterval(this.interval);\n  }\n\n  handleCounterBtnClick = () => {\n    if (this.state.count < LIMIT) {\n      this.setState(({ count }) => {\n        const newCount = count + 1;\n        const color = this.getColor(newCount);\n        if (color !== palette.transparent) {\n          this.colors.push(color);\n        }\n        return { count: newCount };\n      });\n      this.stopRecapInterval();\n    }\n  };\n\n  handleRecapBtnClick = () => {\n    this.startRecapInterval();\n  };\n\n  // Helpers\n  isPrime(num) {\n    for (let i = 2, s = Math.sqrt(num); i <= s; i++) {\n      if (num % i === 0) {\n        return false;\n      }\n    }\n    return num !== 0;\n  }\n  \n  getColor(num) {\n    if (num % 5 === 3) {\n      return palette.green;\n    }\n    \n    if (this.isPrime(num)) {\n      return palette.blue;\n    }\n    \n    return palette.transparent;\n  }\n\n  render() {\n    const { count, cycleIndex, recaping } = this.state;\n    const alt = count !== 0 && count % 10 === 0;\n    const color = recaping ? this.colors[cycleIndex] : this.getColor(count);\n    return (\n      <Wrapper>\n        <Container color={color} alt={alt}>\n          <div>\n            <Button onClick={this.handleCounterBtnClick}>\n              Click Me: {count}\n            </Button>\n            <Button onClick={this.handleRecapBtnClick}>\n              Recap colors\n            </Button>\n          </div>\n        </Container>\n      </Wrapper>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}